
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  image         String?
  accounts      Account[]
  bookmarks     Bookmark[]
  folders       Folder[]
  api_keys      ApiKey[]
  blogs         BlogPost[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified Boolean
  sessions      Session[]
  tags          Tag[]

  @@map("user")
}

model ApiKey {
  id             String   @id
  userId         String
  provider       String
  accessToken           String?
  idToken               String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
}

model Account {
  id                    String    @id @default(cuid())
  user                  User      @relation(fields: [userId], references: [id])
  userId                String
  provider              String
  providerAccountId     String
  accessToken           String?
  refreshToken          String?
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accountId             String
  providerId            String
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Bookmark {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  folder      Folder?       @relation(fields: [folderId], references: [id])
  folderId    String?
  title       String
  url         String
  description String?
  content     String?
  faviconUrl  String?
  imageUrl    String?
  siteName    String?
  
  isPublic    Boolean       @default(false)
  tags        BookmarkTag[]
  slug        String?        @unique 
  highlights  Highlight[]
  blogPost    BlogPost?     @relation(fields: [blogPostId], references: [id])
  blogPostId  String?
 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Tag {
  id            String        @id @default(cuid())
  name          String        @unique
  user_id       String
  user          User          @relation(fields: [user_id], references: [id])
  color         String        @default("#000000")
  bookmark_tags BookmarkTag[]
}

model BookmarkTag {
  bookmark_id String
  bookmark    Bookmark @relation(fields: [bookmark_id], references: [id])
  tag_id      String
  tag         Tag      @relation(fields: [tag_id], references: [id])

  @@unique([tag_id, bookmark_id])
}


model Highlight {
  id         String   @id @default(cuid())
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId String
  startingPosition Int
  endingPosition Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model BlogSource {
  id        String     @id @default(cuid())
  url       String     @unique
  title     String?
  posts     BlogPost[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model BlogPost {
  id          String     @id @default(cuid())
  blog        BlogSource @relation(fields: [blogId], references: [id])
  blogId      String
  title       String
  url         String     @unique
  summary     String?
  content     String?
  publishedAt DateTime?
  user_id     String
  user        User       @relation(fields: [user_id], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   Bookmark[]
}

model FetchLog {
  id        Int      @id @default(autoincrement())
  userId    String?
  platform  String
  status    String
  error     String?
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
